Genel Mağaza (General Store): Çok çeşitli ürünler satan mağazalar. Örneğin, giyim, elektronik, ev eşyaları ve daha fazlası.

Kategoriye Özel Mağaza (Category-Specific Store): Belirli bir ürün kategorisine odaklanan mağazalar. Örneğin, sadece elektronik ürünler satan bir mağaza.

Butik Mağaza (Boutique Store): Genellikle moda ve aksesuarlar gibi sınırlı sayıda özel ürünler satan küçük mağazalar.

Marka Mağazası (Brand Store): Tek bir markanın ürünlerini satan mağazalar. Örneğin, bir markanın resmi online mağazası.

El Sanatları ve Hobi Mağazası (Crafts and Hobby Store): El yapımı ürünler veya hobi malzemeleri satan mağazalar.

Gıda ve İçecek Mağazası (Food and Beverage Store): Gıda ürünleri, içecekler, gurme yiyecekler veya özel diyet ürünleri satan mağazalar.

Kozmetik ve Kişisel Bakım Mağazası (Cosmetics and Personal Care Store): Kozmetik ürünler, cilt bakım ürünleri ve kişisel bakım ürünleri satan mağazalar.

Elektronik Mağazası (Electronics Store): Bilgisayarlar, telefonlar, ev sinema sistemleri gibi elektronik ürünler satan mağazalar.

Ev ve Bahçe Mağazası (Home and Garden Store): Ev eşyaları, mobilyalar, bahçe ekipmanları ve dekorasyon ürünleri satan mağazalar.

Spor ve Dış Mekan Mağazası (Sports and Outdoor Store): Spor ekipmanları, outdoor giyim ve aksesuarlar satan mağazalar.

Kitap ve Müzik Mağazası (Books and Music Store): Kitaplar, dergiler, müzik albümleri ve diğer medya ürünleri satan mağazalar.

Çocuk ve Bebek Mağazası (Kids and Baby Store): Bebek ve çocuk ürünleri, oyuncaklar ve çocuk giyim satan mağazalar.








import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Navbar from '../components/Navbar';
import { Form, Button, Container, Col, Row, Alert } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';


function Profile() {
  const [userData, setUserData] = useState({
    storeName: '',
    category: '',
    packageType: ''
  });
  const [loading, setLoading] = useState(true);
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword1, setNewPassword1] = useState('');
  const [newPassword2, setNewPassword2] = useState('');
  const [passwordMatch, setPasswordMatch] = useState(true);
  const [passwordError, setPasswordError] = useState('');
  const [passwordVisible, setPasswordVisible] = useState({
    currentPassword: false,
    newPassword1: false,
    newPassword2: false
  });
  const [packageType, setPackageType] = useState('');
  const [packageData, setPackageData] = useState([]);
  const [packageError, setPackageError] = useState('');

  const navigate = useNavigate();

  useEffect(() => {
    const fetchUserData = async () => {
      const jwt = localStorage.getItem('jwt');
      if (!jwt) {
        navigate('/login');
        return;
      }
      try {
        const response = await axios.get('https://bilir-d108588758e4.herokuapp.com/api/profile', {
          headers: {
            'Authorization': `Bearer ${jwt}`
          }
        });
        setUserData({
          storeName: response.data.storeName,
          category: response.data.category,
          packageType: response.data.packageType
        });
        setPackageType(response.data.packageType);
        
        const packagesResponse = await axios.get('https://bilir-d108588758e4.herokuapp.com/api/profile');
        setPackageData(packagesResponse.data);
      } catch (error) {
        console.error('Error fetching user data:', error);
        navigate('/login');
      } finally {
        setLoading(false);
      }
    };
    fetchUserData();
  }, [navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUserData({
      ...userData,
      [name]: value
    });
  };

  const handleUpdateProfile = async () => {
    const jwt = localStorage.getItem('jwt');
    try {
      await axios.put('https://bilir-d108588758e4.herokuapp.com/api/updateProfile', {
        storeName: userData.storeName,
        category: userData.category,
        packageType: packageType
      }, {
        headers: {
          'Authorization': `Bearer ${jwt}`
        }
      });
      alert('Profile updated successfully');
    } catch (error) {
      console.error('Error updating profile:', error);
      alert('An error occurred while updating the profile.');
    }
  };

  const handleUpdatePassword = async () => {
    if (newPassword1 !== newPassword2) {
      setPasswordMatch(false);
      setPasswordError('New passwords do not match.');
      return;
    }
    setPasswordMatch(true);
    setPasswordError('');

    const jwt = localStorage.getItem('jwt');
    try {
      await axios.put('https://bilir-d108588758e4.herokuapp.com/api/updateProfile', {
        currentPassword: currentPassword,
        newPassword: newPassword1
      }, {
        headers: {
          'Authorization': `Bearer ${jwt}`
        }
      });
      alert('Password updated successfully');
      setCurrentPassword('');
      setNewPassword1('');
      setNewPassword2('');
    } catch (error) {
      console.error('Error updating password:', error.response ? error.response.data : error.message);
      alert('An error occurred while updating the password.');
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('jwt');
    navigate('/login');
  };

  const handleDeleteAccount = async () => {
    const jwt = localStorage.getItem('jwt');
    try {
      await axios.post('https://bilir-d108588758e4.herokuapp.com/api/deleteAccount', {
        userId: localStorage.getItem('userId')
      }, {
        headers: {
          'Authorization': `Bearer ${jwt}`
        }
      });
      localStorage.removeItem('jwt');
      navigate('/signup');
    } catch (error) {
      console.error('Error deleting account:', error);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  const togglePasswordVisibility = (field) => {
    setPasswordVisible({
      ...passwordVisible,
      [field]: !passwordVisible[field]
    });
  };

  return (
    <div className="background">
      <Navbar />
      <div className="container p-5 mt-5 border" style={{ maxHeight: '350px', width: '1000px' }}>
        <h1 className="text-start" style={{ width: '1000px', paddingLeft: '30px', fontSize: '36px', fontWeight: 'bold' }}>Basic Information</h1>
        <Form className="bg-light p-5 mt-3 rounded" style={{ height: '240px' }}>
          <Row>
            <Col>
              <Form.Group controlId="formStoreName" style={{ marginBottom: '15px' }}>
                <Form.Label className="custom-label">Store Name</Form.Label>
                <Form.Control
                  type="text"
                  name="storeName"
                  value={userData.storeName}
                  onChange={handleInputChange}
                  placeholder="Store Name"
                />
              </Form.Group>
            </Col>
            <Col>
              <Form.Group controlId="formCategory">
                <Form.Label className="custom-label">Category</Form.Label>
                <Form.Control
                  type="text"
                  name="category"
                  value={userData.category}
                  onChange={handleInputChange}
                  placeholder="Category"
                />
              </Form.Group>
            </Col>
          </Row>
        </Form>
      </div>

      <div className="container p-5 mt-5 border" style={{ maxHeight: '350px', width: '1000px' }}>
        <h2 className="text-start" style={{ width: '1000px', paddingLeft: '30px', fontSize: '36px', fontWeight: 'bold' }}>
          Password Update
        </h2>
        <Form className="bg-light p-5 mt-3 rounded d-flex justify-content-center" style={{ height: '240px' }}>
          <Row>
            <Col sm={6} style={{ width: '360px', alignItems: 'center', display: 'grid' }}>
              <Form.Group controlId="formCurrentPassword">
                <Form.Label className="custom-label">Current Password</Form.Label>
                <Form.Control
                  type={passwordVisible.currentPassword ? "text" : "password"}
                  name="currentPassword"
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                  placeholder="Current Password"
                />
              </Form.Group>
            </Col>
            <Col sm={6} style={{ width: '360px' }}>
              <Form.Group controlId="formNewPassword1">
                <Form.Label className="custom-label">New Password</Form.Label>
                <Form.Control className='mb-3'
                  type={passwordVisible.newPassword1 ? "text" : "password"}
                  name="newPassword1"
                  value={newPassword1}
                  onChange={(e) => setNewPassword1(e.target.value)}
                  placeholder="New Password"
                />
              </Form.Group>
              <Form.Group controlId="formNewPassword2">
                <Form.Label className="custom-label">Confirm New Password</Form.Label>
                <Form.Control
                  type={passwordVisible.newPassword2 ? "text" : "password"}
                  name="newPassword2"
                  value={newPassword2}
                  onChange={(e) => setNewPassword2(e.target.value)}
                  placeholder="Confirm New Password"
                />
              </Form.Group>
            </Col>
          </Row>
          {!passwordMatch && (
            <Alert variant="danger">
              {passwordError}
            </Alert>
          )}
        </Form>
      </div>

      <div className="container p-5 mt-5 border" style={{ maxHeight: '350px', width: '1000px' }}>
        <h2 className="text-start" style={{ width: '1000px', paddingLeft: '30px', fontSize: '36px', fontWeight: 'bold' }}>
          Choose Your Plan
        </h2>
        <Form className="bg-light p-5 mt-3 rounded" style={{ height: '240px' }}>
          <h2 className="mb-2 fs-6 text-center">Choose Your Plan</h2>
          <Form.Control.Feedback type="invalid">
            {packageError}
          </Form.Control.Feedback>
          <Row className="mb-4">
            {packageData.map((pkg) => (
              <Col md={4} key={pkg.value}>
                <div
                  className={`package-card p-3 border rounded-5 ${pkg.value} ${packageType === pkg.value ? 'selected' : ''}`}
                  onClick={() => setPackageType(pkg.value)}
                >
                  <Form.Check
                    type="radio"
                    value={pkg.value}
                    checked={packageType === pkg.value}
                    onChange={(e) => setPackageType(e.target.value)}
                    id={pkg.value}
                    name="package"
                  >
                    <Form.Check.Input type="radio" className="d-none" />
                    <Form.Check.Label>
                      <div className="package-content">
                        <h3>{pkg.title}</h3>
                        <p dangerouslySetInnerHTML={{ __html: pkg.description.replace('**', '<strong>').replace('**', '</strong>') }} />
                        <ul>
                          {pkg.list && pkg.list.map((item, index) => (
                            <li key={index}>
                              {item}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </Form.Check.Label>
                  </Form.Check>
                </div>
              </Col>
            ))}
          </Row>
        </Form>
      </div>

      <div className="container p-5 mt-5 border" style={{ maxHeight: '350px', width: '1000px' }}>
        <Container className="bg-light p-5 mt-3 rounded" style={{ height: '240px' }}>
          <div className="profile-actions mt-2">
            <Button className='mt-4' variant="primary" onClick={handleUpdateProfile}>
              Update Profile
            </Button>
            <Button variant="secondary" onClick={handleLogout} className="me-2">
              Logout
            </Button>
            <Button variant="danger" onClick={handleDeleteAccount} className="ml-2">
              Delete Account
            </Button>
          </div>
        </Container>
      </div>
    </div>
  );
}

export default Profile;
